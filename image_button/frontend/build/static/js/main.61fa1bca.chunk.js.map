{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","count","mouseIn","render","image","props","args","theme","style","all","padding","cursor","borderStyling","primaryColor","border","borderRadius","onClick","onClicked","disabled","onMouseEnter","_onMouseEnter","onMouseLeave","_onMouseLeave","src","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"0PAgBMA,E,4MACGC,MAAQ,CAAEC,MAAO,EAAGC,SAAS,G,EAE7BC,OAAS,WAGd,IAAMC,EAAQ,EAAKC,MAAMC,KAAX,MAKNC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAInC,GAAID,EAAO,CACTC,EAAMC,IAAM,QACZD,EAAME,QAAU,MAChBF,EAAMG,OAAS,UAMf,IAAMC,EAAa,UAAM,EAAKZ,MAAME,QAAU,EAAI,EAA/B,oBACjB,EAAKF,MAAME,QAAUK,EAAMM,aAAe,QAG5CL,EAAMM,OAASF,EACfJ,EAAMO,aAAe,MACrBP,EAAME,QAAU,IAOlB,OACI,4BACEF,MAAOA,EACPQ,QAAS,EAAKC,UACdC,SAAU,EAAKb,MAAMa,SACrBC,aAAc,EAAKC,cACnBC,aAAc,EAAKC,eAEnB,yBAAKC,IAAKnB,M,EAMVa,UAAY,WAGlB,EAAKO,UACH,SAAAC,GAAS,MAAK,CAAExB,MAAOwB,EAAUxB,MAAQ,MACzC,kBAAMyB,IAAUC,kBAAkB,EAAK3B,MAAMC,W,EAKzCmB,cAAgB,WACtB,EAAKI,SAAS,CAAEtB,SAAS,K,EAInBoB,cAAgB,WACtB,EAAKE,SAAS,CAAEtB,SAAS,K,YApEH0B,KA6EXC,cAAwB9B,GCzFvC+B,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.61fa1bca.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  count: number\n  mouseIn: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { count: 0, mouseIn: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const image = this.props.args[\"image\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      style.all = 'unset'\n      style.padding = '1em'\n      style.cursor = 'pointer'\n      \n      //  const borderStyling = `5px solid ${\n      //    this.state.mouseIn ? theme.primaryColor : \"gray\"\n      //  }`\n\n      const borderStyling = `${this.state.mouseIn ? 1 : 0}px solid ${\n        this.state.mouseIn ? theme.primaryColor : \"gray\"\n      }`\n\n      style.border = borderStyling\n      style.borderRadius = '50%'\n      style.padding = '0'\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"count\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onMouseEnter={this._onMouseEnter}\n          onMouseLeave={this._onMouseLeave}\n        >\n          <img src={image}></img>\n        </button>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ count: prevState.count + 1 }),\n      () => Streamlit.setComponentValue(this.state.count)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onMouseEnter = (): void => {\n    this.setState({ mouseIn: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onMouseLeave = (): void => {\n    this.setState({ mouseIn: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}